exit()
q()
getwd()
getwd()
setwd("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp1")
help("mean")
? mean
help(mean)
y
x
x = sqrt(3)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp1/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp1/res.R", echo=TRUE)
vec1 <- c(3,4.6,1.2,-7.8)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp1/res.R", echo=TRUE)
vec1
vec2 <- -4:7
vec2
vec3 <- seq(2,18,3)
vec3
vec4 <- rep(vec2,3)
vec4
vec5 <- c(vec1,vec2,vec3)
couleur <- c("vert","rouge","jaune","bleu")
vec6 <- c(T,F,T,T,F)
length(vec3)
vec1 + 10
vec1 * vec2
vec1[3]
vec1[0]
vec1[1]
vec1[c(1,3)]
vec4[vec4==5]
vec4[vec4==5] = 1
sort(vec1)
rank(vec1)
cumsim(vec1)
cumsum(vec1)
rev(vec1)
cumsum(rev(vec1)
)
vec4
mat1 = matrix(vec4, ncol=3, byrow=TRUE)
mat1
mat2 = matrix(vec4, ncol=4, byrow=FALSE)
mat2
size(vec4)
lenght(vec4)
length(vec4)
dim(mat1)
A = matrix(1:9, ncol=3)
A
A / c(1,2,3)
t(A) / c(1,2,3)
t(a)(t(A) / c(1,2,3) )
t((t(A) / c(1,2,3))
)
t(t(A) / c(1,2,3)
t(t(A) / c(1,2,3))
View(A)
View(A)
table1 = read.table("oiseaux.csv", header=TRUE)
table1 = read.csv("oiseaux.csv", header=TRUE)
table1 = read.table("table.txt", header=TRUE)
table1
head(table)
head(table1)
t = table1
head(t)
t$Note1
t[4,3]
t[4,2]
t[,2]
taille<-c(1.40,1.67,1.90,2.14)
poids<-c(54,62,75,91)
danger<-c("extrême","forte","forte","faible")
tab1<-data.frame(taille,poids,danger,row.names=noms)
tab1<-data.frame(taille,poids,danger,row.names=noms)
noms
tab1<-data.frame(taille,poids,dange)
tab1<-data.frame(taille,poids,dangee)
tab1<-data.frame(taille,poids,danger)
tab1
oiseaux=read.csv("oiseaux.csv", header=TRUE,dec=",",sep=";")
oiseaux
head(oiseaux)
oiseaux$TET
oiseaux[4,3]
oiseaux[,2]
attach(oiseaux)
HUM
mean(HUM)
var(HUM)
sd(HUM)
median(HUM)
HUM
length(HUM)
sort(HUM)
sort(HUM)[25]
49*0,8
49*0.8
sort(HUM)[39]
quantile(0.8, HUM)
quantile(0.8)
mean(quantile)
mean(quantile)
mean("quantile")
? quantile
quantile(0.8, props=HUM)
quantile(HUM, O.8)
quantile(HUM, props+O.8)
quantile(HUM, props=O.8)
quantile(HUM)
quantile(HUM, props = seq(1))
quantile(HUM, props = seq(0,1))
quantile(HUM, props = seq(0,0.21,1))
quantile(HUM, probs = seq(0, 1, 0.25))
quantile(HUM, probs = seq(0, 1, 0.1))
HUM[49*0.8]
49*0.8
HUM[39.3]
HUM[39.2]
HUM[39]
sort(HUM)[39]
sort(HUM)[39.2]
sort(HUM)[40]
sort(HUM)[39.2]
quantile(HUM, probs = seq(0, 1, 0.001))
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp1/res.R", echo=TRUE)
rm(list = lsf.str())
rm(list = lsf.str())
rm(list=ls())
setwd("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2")
haricots<-read.csv("haricots.csv",header=TRUE,sep=";",dec=",")
clear()
cls
haricors
haricots
h = haricots
head(h)
names(haricots)
levels(haricots$espece)
attach(haricots)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
View(data)
View(data)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
View(data)
View(data)
rm(superficies)
rm(h)
rm(haricots)
? hist
? diff
diff(bornes)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
diff(bornes)
? hsit
? hist
hist(superficie, bornes)
hist(nbExploitation,superficie)
hist(nbExploitation,bornes)
#On calcule la taille de chaque batton : effectifDeLaClasse/effectifTotal * 1/(borneSup-borneInf)
amplitudes = diff(bornes)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
bornes
bornes[4]
bornes[-6]
bornes[-5]
bornes[-6]
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R")
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R")
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
## b)
ecc = cumsum(effectif)
ecd = rev(cumsum(rev(effectif)))
fcc = ecc/sum(effectif)
fcd = ecf/sum(effectif)
fcd = ecd/sum(effectif)
centres[which(rank(hauteurs)==5)]
## c)
centres[which(rank(hauteur)==5)]
donnees = rep(centres, effectif)
mean(donnees)
? mean
var(donnees)
source("~/Documents/etudes/ecole/superieur/l3_info/proba_et_stat/tps/tp2/res.R", echo=TRUE)
quantile(donnees, 0.2)
quantile(donnees, 0.5)
#On crée les objets
superficie = c('[0;5[', '[5,10[', '[10;20[', '[20;50[', '[50;100[')
bornes = c(0,5,10,20,50,100)
effectif = c(5,24,38,26,7)
#On calcule la taille de chaque batton en prennant en compte
amplitudes = diff(bornes) #On calcule l'écart entre chaque borne
centres = bornes[-6] + amplitudes/2 #On calcule le centre de chaque batton : soit les bornes (sauf la dernière) + la taille de la borne/2
hauteur = effectif/sum(effectif)/amplitudes
#On crée l'histogramme
barplot(height = hauteur,
width = amplitudes,
names.arg = superficie,
las = 2
)
amplitudes = diff(bornes) #On calcule l'amplitude de chaque classe
centres = bornes[-6] + amplitudes/2 #On calcule le centre de chaque classe : soit les bornes (sauf la dernière) + la taille de la borne/2
hauteur = effectif/sum(effectif)
#On crée les objets
superficie = c('[0;5[', '[5,10[', '[10;20[', '[20;50[', '[50;100[')
bornes = c(0,5,10,20,50,100)
effectif = c(5,24,38,26,7)
amplitudes = diff(bornes) #On calcule l'amplitude de chaque classe
centres = bornes[-6] + amplitudes/2 #On calcule le centre de chaque classe : soit les bornes (sauf la dernière) + la taille de la borne/2
hauteur = effectif/sum(effectif)
#On crée l'histogramme
barplot(height = hauteur,
width = amplitudes,
names.arg = superficie,
las = 2
)
ecc = cumsum(effectif) #Effectif cummulé croissant
ecd = rev(cumsum(rev(effectif))) #Effectif cummulé décroissant
centres[which(rank(hauteur)==5)] #Pour trouver
centres[which(rank(hauteur)==5)] #Pour trouver
#On crée les objets
superficie = c('[0;5[', '[5,10[', '[10;20[', '[20;50[', '[50;100[')
bornes = c(0,5,10,20,50,100)
effectif = c(5,24,38,26,7)
amplitudes = diff(bornes) #On calcule l'amplitude de chaque classe
centres = bornes[-6] + amplitudes/2 #On calcule le centre de chaque classe : soit les bornes (sauf la dernière) + la taille de la borne/2
hauteur = effectif/sum(effectif)/amplitudes
#On crée l'histogramme
barplot(height = hauteur,
width = amplitudes,
names.arg = superficie,
las = 2
)
centres[which(rank(hauteur)==5)] #Pour trouver
donnees = rep(centres, effectif)
# On crée les objets
vers = c(0,1,2,3,4,5,6,7)
prelevement = c(13,27,28,19,8,3,1,1)
barplot(height = prelevements/sum(prelevements),
names.arg = vers,
col ='orange'
)
# On crée les objets
vers = c(0,1,2,3,4,5,6,7)
prelevements = c(13,27,28,19,8,3,1,1)
barplot(height = prelevements/sum(prelevements),
names.arg = vers,
col ='orange'
)
```{r}
rm(list=ls())
```{r}
rcice 1
## a)
```{r}
#On crée les objets
superficie = c('[0;5[', '[5,10[', '[10;20[', '[20;50[', '[50;100[')
bornes = c(0,5,10,20,50,100)
effectif = c(5,24,38,26,7)
amplitudes = diff(bornes) #On calcule l'amplitude de chaque classe
centres = bornes[-6] + amplitudes/2 #On calcule le centre de chaque classe : soit les bornes (sauf la dernière) + la taille de la borne/2
hauteur = effectif/sum(effectif)/amplitudes
#On crée l'histogramme
barplot(height = hauteur,
width = amplitudes,
names.arg = superficie,
las = 2
)
```
## b)
```{r}
ecc = cumsum(effectif) #Effectif cummulé croissant
ecd = rev(cumsum(rev(effectif))) #Effectif cummulé décroissant
fcc = ecc/sum(effectif) #Fréquence cummulée croissante
fcd = ecd/sum(effectif) #Fréquence cummulée décroissante
```
## c)
```{r}
centres[which(rank(hauteur)==5)] #Pour trouver
```
## d)
```{r}
donnees = rep(centres, effectif)
mean(donnees)
var(donnees)
```
## e)
```{r}
median(donnees)
quantile(donnees, 0.5)
```
# Exercice 2’
## a)
L'unité statistique est le prélévement. Une *observation* dans ce contexte est un échantillion de sable dans lequel on compte le nombre de vers. L'unique variable ici est la variable quantitative discrète qu'est le nombre de vers. À chaque unité statistique (prélévement), on associe la valeur de la variable "nombre de vers".
```{r}
# On crée les objets
vers = c(0,1,2,3,4,5,6,7)
prelevements = c(13,27,28,19,8,3,1,1)
barplot(height = prelevements/sum(prelevements),
names.arg = vers,
col ='orange'
)
```
## b)
```{r}
fcc = cumsum(prelevements)/sum(prelevements)
fcd = rev(cumsum(rev(prelevements)))/sum(prelevements)
```
## c)
```{r}
donnees = rep(vers, prelevements)
mean(donnees)
var(donnees)
```
## d)
```{r}
vers[rank(prelevements)==8]
quantile(donnees, 0.25)
```
vers[rank(prelevements)==8]
quantile(donnees, 0.25)
mean(donnees)
donnees = rep(vers, prelevements)
mean(donnees)
donnees = rep(vers, prelevements)
mean(donnees)
var(donnees)
